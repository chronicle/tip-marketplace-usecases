{
  "IsEnabled": true,
  "IsCustom": true,
  "Integration": "SentinelOneV2",
  "DocumentationLink": null,
  "Name": "SentinelOne - Application Connector",
  "Description": "",
  "Creator": "Admin",
  "Script": "from SiemplifyUtils import output_handler\n# ==============================================================================\n# title           :ApplicationConnector.py\n# description     :This Module contain SentinelOneV2 Application Connector logic.\n# author          :danield@siemplify.co\n# date            :27-04-2020\n# python_version  :2.7\n# libraries       : -\n# requirements    :\n# ==============================================================================\n# =====================================\n#              IMPORTS                #\n# =====================================\nfrom SentinelOneV2Manager import SentinelOneV2Manager, SentinelOneV2ApiLimitError\nfrom SiemplifyConnectors import SiemplifyConnectorExecution, CaseInfo\nfrom SiemplifyUtils import convert_unixtime_to_datetime, utc_now, unix_now, convert_datetime_to_unix_time, convert_string_to_unix_time, dict_to_flat\nfrom TIPCommon import extract_connector_param\nfrom EnvironmentCommon import EnvironmentHandle\nimport datetime\nimport uuid\nimport sys\nimport copy\n\n# =====================================\n#             CONSTANTS               #\n# =====================================\n# Existing Event Fields.\nEVENT_CREATION_TIME_FIELD = 'createdAt'\nEVENT_UUID_FIELD = 'uuid'\n\n# New Additional even fields.\nEVENT_CREATION_TIME_UNIXTIME_FIELD = 'creation_time_unix_time'\n\nALERT_NAME_FIELD = \"riskLevel\"\nAPP_NAME = \"name\"\n\nDEFAULT_PRODUCT = 'SentinelOneV2Applications'\nDEFAULT_VENDOR = u'SentinelOneV2Applications'\n\nALERT_WITHOUT_A_NAME_DEFAULT = 'Application has no name.'\n\n\n# =====================================\n#              CLASSES                #\n# =====================================\nclass SentinelOneV2QueryConnectorError(Exception):\n    pass\n\n\nclass SentinelOneV2ApplicationConnector(object):\n    def __init__(self, logger):\n        self.logger = logger\n\n    @staticmethod\n    def validate_timestamp_offset(datetime_timestamp, offset_in_days=2):\n        \"\"\"\n        Validate if timestamp in offset range.\n        :param datetime_timestamp: timestamp that were fetched from the timestamp file {datetime}\n        :param offset_in_days: the offset in days to validate {string}\n        :return: unixtime: if time not in offset return offset time {string}\n        \"\"\"\n        offset_datetime = utc_now() - datetime.timedelta(days=offset_in_days)\n\n        if datetime_timestamp <= offset_datetime:\n            return offset_datetime\n        return datetime_timestamp\n\n    def convert_app_time_to_unixtime(self, string_time):\n        \"\"\"\n        Convert threat time from string format to unixtime.\n        :param string_time: {stirng} Time string.\n        :return: {long} Time unixtime.\n        \"\"\"\n        try:\n            return convert_string_to_unix_time(string_time)\n        except Exception as err:\n            error_message = \"Failed to convert threat time, ERROR: {0}\".format(err.message)\n            self.logger.error(error_message)\n            self.logger.exception(err)\n            return 1\n\n    @staticmethod\n    def create_case(events, query, device_product_field, environment):\n        \"\"\"\n        Create a case object.\n        :return: {CaseInfo}\n        \"\"\"\n        case_info = CaseInfo()\n        case_info.start_time = case_info.end_time = events.get('created_at_unixtime')\n        case_info.device_product = events.get(device_product_field, DEFAULT_PRODUCT)\n        case_info.device_vendor = DEFAULT_VENDOR\n        case_info.name = \"{}({})\".format(events.get(APP_NAME),\n                                         events.get(ALERT_NAME_FIELD, ALERT_WITHOUT_A_NAME_DEFAULT))\n        case_info.ticket_id = events.get(EVENT_UUID_FIELD, \"{0}_{1}\".format(case_info.start_time,\n                                                                            str(uuid.uuid4())))\n\n        case_info.rule_generator = query\n        case_info.device_vendor = case_info.device_product\n        case_info.environment = environment\n\n        # If no Session ID, replace with timestamp + uuid because timestamp can be not unique in some cases.\n\n        case_info.display_id = case_info.identifier = case_info.ticket_id\n\n        case_info.events = [events]\n        return case_info\n\n\n@output_handler\ndef main(test_handler=False):\n    connector_scope = SiemplifyConnectorExecution()\n    output_variables = {}\n    log_items = []\n    cases = []\n    apps = []\n\n    try:\n        if test_handler:\n            connector_scope.LOGGER.info(\n                \" ------------ Starting SentinelOneV2 Application Connector test. ------------ \")\n        else:\n            connector_scope.LOGGER.info(\" ------------ Starting Connector. ------------ \")\n\n        api_root = extract_connector_param(connector_scope, u\"API Root\", is_mandatory=True)\n        api_token = extract_connector_param(connector_scope, u\"API Token\", is_mandatory=True)\n        app_risk_level = extract_connector_param(connector_scope, u\"App Risk\", is_mandatory=True).split(\n            \",\") if extract_connector_param(connector_scope,\n                                            u\"App Risk\") else []\n        verify_ssl = extract_connector_param(connector_scope, u\"Verify SSL\", is_mandatory=True, input_type=bool)\n        max_days_backwards = extract_connector_param(connector_scope, param_name=u\"Fetch Max Days Backwards\",\n                                                     is_mandatory=False, default_value=1, input_type=int,\n                                                     print_value=True)\n        events_limit = extract_connector_param(connector_scope, param_name=u\"Event Count Limit\", is_mandatory=False,\n                                               default_value=50, input_type=int, print_value=True)\n        device_product_field = extract_connector_param(connector_scope, u\"DeviceProductField\", is_mandatory=True)\n\n        sentinel_manager = SentinelOneV2Manager(api_root, api_token, verify_ssl)\n        sentinel_connector = SentinelOneV2ApplicationConnector(connector_scope.LOGGER)\n\n        last_run_time = int((sentinel_connector.validate_timestamp_offset(\n            connector_scope.fetch_timestamp(datetime_format=True),\n            max_days_backwards)).strftime(\"%s\")) * 1000\n\n        current_time = unix_now()\n        between_time = \"{0}-{1}\".format(last_run_time, current_time)\n\n        for risk in app_risk_level:\n            connector_scope.LOGGER.info('Getting \"{0}\" risk applications.'.format(unicode(risk).encode('utf-8')))\n            try:\n                if test_handler:\n                    applications = sentinel_manager.get_installed_applications(risk_level=risk,\n                                                                               installed_between=between_time,\n                                                                               limit=2)\n                else:\n                    applications = sentinel_manager.get_installed_applications(risk_level=risk,\n                                                                               installed_between=between_time,\n                                                                               limit=events_limit)\n\n                for app in applications:\n                    agent_uuid = app.get('agentUuid')\n                    app_id = app.get('id')\n                    app['created_at_unixtime'] = (\n                        sentinel_connector.convert_app_time_to_unixtime(app.get(EVENT_CREATION_TIME_FIELD)))\n\n                    flat_apps = dict_to_flat(app)\n\n                    connector_scope.LOGGER.info(\n                        'Found \"{0}\" Applications with a risk level of \"{1}\"'.format(len(applications), unicode(\n                            risk).encode('utf-8')))\n\n                    connector_scope.LOGGER.info('Creating case for risk: \"{0}\"'.format(unicode(risk).encode('utf-8')))\n                    case = sentinel_connector.create_case(\n                        flat_apps,\n                        query=risk,\n                        device_product_field=device_product_field,\n                        environment=connector_scope.context.connector_info.environment)\n\n                    is_overflowed = False\n\n                    try:\n                        is_overflowed = connector_scope.is_overflowed_alert(\n                            environment=case.environment,\n                            alert_identifier=str(case.ticket_id),\n                            alert_name=str(case.rule_generator),\n                            product=str(case.device_product))\n\n                    except Exception as err:\n                        connector_scope.LOGGER.error(\n                            'Error validation connector overflow, ERROR: {0}'.format(unicode(err)))\n                        connector_scope.LOGGER.exception(err)\n                        if test_handler:\n                            raise\n\n                    if is_overflowed:\n                        connector_scope.LOGGER.info(\n                            \"{alert_name}-{alert_identifier}-{environment}-{product} found as overflow alert. Skipping.\"\n                            .format(alert_name=str(case.rule_generator),\n                                    alert_identifier=str(case.ticket_id),\n                                    environment=str(case.environment),\n                                    product=str(case.device_product)))\n                    else:\n                        cases.append(case)\n                        connector_scope.LOGGER.info('Case with display id \"{0}\" was created.'.format(case.display_id))\n\n            except Exception as err:\n                error_message = \"Failed fetching applications with {0} risk\".format(\n                    unicode(risk).encode('utf-8'))\n                connector_scope.LOGGER.error(error_message)\n                connector_scope.LOGGER.exception(err)\n                if test_handler:\n                    raise\n\n        if test_handler:\n            connector_scope.LOGGER.info(\n                \" ------------ Complete SentinelOneV2 Application Connector test. ------------ \")\n        else:\n            connector_scope.LOGGER.info(\" ------------ Complete Connector Iteration. ------------ \")\n\n        # sentinel_manager.logout()\n        if not test_handler:\n            connector_scope.save_timestamp(current_time)\n        connector_scope.return_package(cases, output_variables, log_items)\n\n    except Exception as err:\n        connector_scope.LOGGER.error('Got exception on main handler. Error: {0}'.format(err))\n        connector_scope.LOGGER.exception(err)\n        if test_handler:\n            raise\n\n\nif __name__ == \"__main__\":\n    if len(sys.argv) < 2 or sys.argv[1] == 'True':\n        print \"Main execution started\"\n        main()\n    else:\n        print \"Test execution started\"\n        main(test_handler=True)\n",
  "Version": 20,
  "MappingRules": [],
  "ProductToVisualFamilyRecords": [],
  "SimulationUseCases": {
    "CasesForUseCase": [],
    "UseCaseName": null
  },
  "Parameters": [
    {
      "ConnectorDefinitionId": 2,
      "IsMandatory": true,
      "DefaultValue": "1",
      "Name": "Fetch Max Days Backwards",
      "Type": 1,
      "Mode": 2,
      "Description": "",
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1590908125486,
      "ModificationTimeUnixTimeInMs": 1590908125486
    },
    {
      "ConnectorDefinitionId": 2,
      "IsMandatory": false,
      "DefaultValue": "true",
      "Name": "Verify SSL",
      "Type": 0,
      "Mode": 2,
      "Description": "",
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1590908125486,
      "ModificationTimeUnixTimeInMs": 1590908125486
    },
    {
      "ConnectorDefinitionId": 2,
      "IsMandatory": true,
      "DefaultValue": "critical",
      "Name": "App Risk",
      "Type": 2,
      "Mode": 2,
      "Description": "",
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1590908125486,
      "ModificationTimeUnixTimeInMs": 1590908125486
    },
    {
      "ConnectorDefinitionId": 2,
      "IsMandatory": true,
      "DefaultValue": "RMpGiejSYHnXjOsLs1ieDaL3J9T3NAbSrXswAJKnKon5Rb10b7QPPQRBxF6V2VpLbffnlausRJsJkQJU",
      "Name": "API Token",
      "Type": 3,
      "Mode": 2,
      "Description": "",
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1590908125486,
      "ModificationTimeUnixTimeInMs": 1590908125486
    },
    {
      "ConnectorDefinitionId": 2,
      "IsMandatory": true,
      "DefaultValue": "https://usea1-partners.sentinelone.net/",
      "Name": "API Root",
      "Type": 2,
      "Mode": 2,
      "Description": "",
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1590908125486,
      "ModificationTimeUnixTimeInMs": 1590908125486
    },
    {
      "ConnectorDefinitionId": 2,
      "IsMandatory": true,
      "DefaultValue": "30",
      "Name": "PythonProcessTimeout",
      "Type": 2,
      "Mode": 0,
      "Description": "The timeout limit (in seconds) for the python process running current script",
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1590908125486,
      "ModificationTimeUnixTimeInMs": 1590908125486
    },
    {
      "ConnectorDefinitionId": 2,
      "IsMandatory": false,
      "DefaultValue": "type",
      "Name": "EventClassId",
      "Type": 2,
      "Mode": 0,
      "Description": "The field name used to determine the event name (sub-type)",
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1590908125486,
      "ModificationTimeUnixTimeInMs": 1590908125486
    },
    {
      "ConnectorDefinitionId": 2,
      "IsMandatory": true,
      "DefaultValue": "product_name",
      "Name": "DeviceProductField",
      "Type": 2,
      "Mode": 0,
      "Description": "The field name used to determine the device product",
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1590908125486,
      "ModificationTimeUnixTimeInMs": 1590908125486
    },
    {
      "ConnectorDefinitionId": 2,
      "IsMandatory": true,
      "DefaultValue": "20",
      "Name": "Event Count Limit",
      "Type": 1,
      "Mode": 2,
      "Description": "",
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1590908125486,
      "ModificationTimeUnixTimeInMs": 1590908125486
    }
  ],
  "Rules": [],
  "IsConnectorRulesSupported": true,
  "IsSystem": false,
  "PythonVersion": "None",
  "Id": 0,
  "CreationTimeUnixTimeInMs": 1588021981846,
  "ModificationTimeUnixTimeInMs": 1590908125477
}
{
  "Name": "Get Process List For Endpoint",
  "Description": "Get list of processes for an endpoint by it's host name or IP address.",
  "Script": "from SiemplifyUtils import output_handler\nfrom SiemplifyAction import SiemplifyAction\nfrom SentinelOneV2Manager import SentinelOneV2Manager, SentinelOneV2NotFoundError\nfrom SiemplifyDataModel import EntityTypes\nfrom SiemplifyUtils import dict_to_flat, flat_dict_to_csv\nfrom TIPCommon import extract_configuration_param, construct_csv\n\n\n# Consts.\nINTEGRATION_NAME = u'SentinelOneV2'\nSCRIPT_NAME = u'Get Process List'\nSENTINEL_PREFIX = 'SENO_'\nADDRESS = EntityTypes.ADDRESS\nHOSTNAME = EntityTypes.HOSTNAME\n\n\n@output_handler\ndef main():\n    # Define Variables.\n    entities_successed = []\n    errors_dict = {}\n    result_value = False\n\n    # Configuration.\n    siemplify = SiemplifyAction()\n    siemplify.script_name = u\"{} - {}\".format(INTEGRATION_NAME, SCRIPT_NAME)\n    siemplify.LOGGER.info(u\"================= Main - Param Init =================\")\n\n    api_root = extract_configuration_param(siemplify, provider_name=INTEGRATION_NAME, param_name=u\"Api Root\",\n                                           is_mandatory=True, input_type=unicode)\n    api_token = extract_configuration_param(siemplify, provider_name=INTEGRATION_NAME, param_name=u\"API Token\",\n                                            is_mandatory=True, input_type=unicode)\n    verify_ssl = extract_configuration_param(siemplify, provider_name=INTEGRATION_NAME, param_name=u\"Verify SSL\",\n                                             default_value=False, input_type=bool)\n\n    siemplify.LOGGER.info(u\"----------------- Main - Started -----------------\")\n\n    sentinel_one_manager = SentinelOneV2Manager(api_root, api_token, verify_ssl)\n\n    # Get scope entities.\n    scope_entities = [entity for entity in siemplify.target_entities if entity.entity_type == ADDRESS or\n                      entity.entity_type == HOSTNAME]\n\n    # Run on entities.\n    for entity in scope_entities:\n        try:\n            siemplify.LOGGER.info(u\"Processing entity {}\".format(entity.identifier))\n\n            # Get endpoint agent id.\n            if entity.entity_type == EntityTypes.HOSTNAME:\n                try:\n                    siemplify.LOGGER.info(u\"Fetching agent for hostname {}\".format(entity.identifier))\n                    agent = sentinel_one_manager.get_agent_by_hostname(entity.identifier)\n                except SentinelOneV2NotFoundError as e:\n                    # Agent was not found in SentinelOne - skip entity\n                    siemplify.LOGGER.info(unicode(e))\n                    siemplify.LOGGER.info(u\"Skipping entity {}\".format(entity.identifier))\n                    continue\n\n            elif entity.entity_type == EntityTypes.ADDRESS:\n                try:\n                    siemplify.LOGGER.info(u\"Fetching agent for address {}\".format(entity.identifier))\n                    agent = sentinel_one_manager.get_agent_by_ip(entity.identifier)\n                except SentinelOneV2NotFoundError as e:\n                    # Agent was not found in SentinelOne - skip entity\n                    siemplify.LOGGER.info(unicode(e))\n                    siemplify.LOGGER.info(u\"Skipping entity {}\".format(entity.identifier))\n                    continue\n\n            else:\n                siemplify.LOGGER.info(u\"Entity {} is of unsupported type.\".format(entity.identifier))\n                continue\n\n            agent_id = agent.id\n\n            if agent_id:\n                siemplify.LOGGER.info(u\"Found agent {} for entity {}\".format(agent_id, entity.identifier))\n                siemplify.LOGGER.info(u\"Fetching processes for agent {}\".format(agent_id))\n                processes_list = sentinel_one_manager.get_agent_processes_list(agent_id)\n\n                if processes_list:\n                    siemplify.LOGGER.info(u\"Found {} processes\".format(len(processes_list)))\n                    entities_successed.append(entity)\n                    result_value = True\n                    # Add entity table.\n                    siemplify.result.add_entity_table(entity.identifier, construct_csv(map(dict_to_flat,\n                                                                                           processes_list)))\n            else:\n                siemplify.LOGGER.error(u'Error: Not found agent id for entity \"{0}\"'.format(entity.identifier))\n\n        except Exception as err:\n            siemplify.LOGGER.error(err.message)\n            siemplify.LOGGER.exception(err)\n            errors_dict[entity.identifier] = unicode(err.message)\n\n    if entities_successed:\n        output_message = u'Found processes for: {0}'.format(u\",\".join([entity.identifier for entity\n                                                                     in entities_successed]))\n    else:\n        output_message = u'No processes were found for target entities.'\n\n    # If were errors present them as a table.\n    if errors_dict:\n        # Produce error CSV.\n        errors_csv = flat_dict_to_csv(errors_dict)\n        # Draw table.\n        siemplify.result.add_data_table(u'Unsuccessful Attempts', errors_csv)\n\n    siemplify.update_entities(entities_successed)\n    siemplify.end(output_message, result_value)\n\n\nif __name__ == '__main__':\n    main()\n\n",
  "IntegrationIdentifier": "SentinelOneV2",
  "ScriptResultName": "is_success",
  "DynamicResultsMetadata": null,
  "Creator": "Admin",
  "IsEnabled": true,
  "IsCustom": true,
  "IsSystem": false,
  "Version": 2.0,
  "TimeoutSeconds": 600,
  "Parameters": [],
  "DefaultResultValue": null,
  "PythonVersion": "None",
  "Id": 0,
  "CreationTimeUnixTimeInMs": 1588021982094,
  "ModificationTimeUnixTimeInMs": 1590908125659
}
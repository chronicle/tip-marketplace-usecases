{
  "Identifier": "LOGZIO fetch-security-events_427e87e4-4c21-4c33-9f2a-42f984a25800",
  "IsCustom": false,
  "PythonVersion": 2,
  "IsRemoteConnector": false,
  "IsEnabled": true,
  "IsSystem": false,
  "Environment": "Default Environment",
  "Integration": "Logzio",
  "ConnectorDefinitionName": "LOGZIO fetch-security-events",
  "DisplayName": "LOGZIO fetch-security-events",
  "Description": "Fetches security events from your Logz.io security account and converts them into new cases in your Siemplify account.",
  "RunIntervalInSeconds": 60,
  "ResultDataType": 0,
  "Version": "182",
  "ConnectorItemIdentifier": null,
  "IsWhitelistSupported": true,
  "ConnectorKey": null,
  "AgentIdentifier": null,
  "IntegrationVersion": 1.0,
  "WhiteListJsonObject": "[]",
  "Params": [
    {
      "ConnectorIdentifier": "LOGZIO fetch-security-events_427e87e4-4c21-4c33-9f2a-42f984a25800",
      "ParamName": "EventClassId",
      "ParamValue": "event_name",
      "Description": "Name of a field representing event names",
      "Type": 2,
      "Mode": 0,
      "IsDisplayed": true,
      "IsMandatory": true,
      "Id": 506,
      "CreationTimeUnixTimeInMs": 1616683425567,
      "ModificationTimeUnixTimeInMs": 1616683425567
    },
    {
      "ConnectorIdentifier": "LOGZIO fetch-security-events_427e87e4-4c21-4c33-9f2a-42f984a25800",
      "ParamName": "DeviceProductField",
      "ParamValue": "device_product",
      "Description": "Name of a field representing device Product in events",
      "Type": 2,
      "Mode": 0,
      "IsDisplayed": true,
      "IsMandatory": true,
      "Id": 505,
      "CreationTimeUnixTimeInMs": 1616683425567,
      "ModificationTimeUnixTimeInMs": 1616683425567
    },
    {
      "ConnectorIdentifier": "LOGZIO fetch-security-events_427e87e4-4c21-4c33-9f2a-42f984a25800",
      "ParamName": "Script",
      "ParamValue": "from SiemplifyConnectors import SiemplifyConnectorExecution\nfrom SiemplifyConnectorsDataModel import AlertInfo\nfrom SiemplifyUtils import output_handler, convert_datetime_to_unix_time\n\nimport concurrent.futures\nimport datetime\nimport dateparser\nimport json\nimport math\nimport requests\n\n\nCONNECTOR_NAME = \"fetch-security-events\"\nPRODUCT = \"Logz.io\"\nVENDOR = \"Logz.io\"\nBASE_URL = \"https://api.logz.io/\"\nTRIGGERED_RULES_API_SUFFIX = \"v2/security/rules/events/search\"\nSORTING_FIELD_INDEX = 0\nSORTING_DESCENDING_INDEX = 1\nSEVERITIES = {'INFO': -1, 'LOW': 40, 'MEDIUM': 60, 'HIGH': 80, 'SEVERE': 100} # maps logzio severity values to siemplify severities\nDEFAULT_PAGE_SIZE = 25\nMIN_PAGE_SIZE = 1\nMAX_PAGE_SIZE = 1000\n\n\n@output_handler\ndef main():\n    alerts = []  # The main output of each connector run\n    siemplify = SiemplifyConnectorExecution()  # Siemplify main SDK wrapper\n    siemplify.script_name = CONNECTOR_NAME\n\n    logzio_api_token = siemplify.extract_connector_param(\"logzio_token\", is_mandatory=True)\n    if logzio_api_token == \"\":\n        siemplify.LOGGER.error(\"Error occurred: no Logzio API token! Exiting.\")\n        raise ValueError\n    logzio_region = siemplify.extract_connector_param(\"logzio_region\", is_mandatory=False, default_value=\"\")\n    url = get_logzio_api_endpoint(siemplify, logzio_region)\n    events_response = execute_logzio_api(siemplify, logzio_api_token, url)\n    if events_response is not None:\n        alerts = create_alerts_array(siemplify, events_response, logzio_api_token, url)\n\n    siemplify.LOGGER.info(\"Total {} alerts will be returned to Siemplify\".format(len(alerts)))\n    siemplify.return_package(alerts)\n    \n    \ndef create_request_body_obj(siemplify, page_number=1):\n    \"\"\" Creates request to send to Logz.io API \"\"\"\n    request_body = {}\n    from_date, to_date = get_dates(siemplify)\n    search_term = siemplify.extract_connector_param(\"search_term\", is_mandatory=False)\n    severities = siemplify.extract_connector_param(\"severities\", is_mandatory=False)\n    page_size = siemplify.extract_connector_param(\"page_size\", is_mandatory=False, default_value=DEFAULT_PAGE_SIZE, input_type=int)\n    if page_size < MIN_PAGE_SIZE or page_size > MAX_PAGE_SIZE:\n        siemplify.LOGGER.warn(\"Invalid page size. Should be betwwen {} and {}. Reverting to default page size: {}\".format(MIN_PAGE_SIZE, MAX_PAGE_SIZE, DEFAULT_PAGE_SIZE))\n        page_size = DEFAULT_PAGE_SIZE\n    request_body[\"filter\"] = {}\n    request_body[\"filter\"][\"timeRange\"] = dict(fromDate=from_date, toDate=to_date)\n    if search_term != None:\n        request_body[\"filter\"][\"searchTerm\"] = search_term\n    if severities != None:\n        request_body[\"filter\"][\"severities\"] = [s.strip() for s in severities.split(\",\")]\n    request_body[\"sort\"] = [{\"field\": \"DATE\", \"descending\": False}]\n    request_body[\"pagination\"] = dict(pageNumber=page_number, pageSize=page_size)\n    siemplify.LOGGER.info(\"{}\".format(request_body))\n    return request_body\n\n\ndef get_base_api_url(region):\n    \"\"\" Returnes API url, in accordance to user's input \"\"\"\n    if region == \"us\" or region == \"\":\n        return BASE_URL\n    else:\n        return BASE_URL.replace(\"api.\", \"api-{}.\".format(region))\n\n\ndef fetch_security_events(api_token, req_body, url, siemplify):\n    \"\"\"\n    Returnes security events from Logz.io.\n    If error occured or no results found, returnes None\n    \"\"\"\n    headers = {\n        'Content-Type': 'application/json',\n        'X-API-TOKEN': api_token\n    }\n    \n    siemplify.LOGGER.info(\"api url: {}\".format(url))\n    try:\n        body = json.dumps(req_body)\n        siemplify.LOGGER.info(\"Fetching security events from Logz.io\")\n        response = requests.post(url, headers=headers, data=body, timeout=5)\n        siemplify.LOGGER.info(\"Status code from Logz.io: {}\".format(response.status_code))\n        if response.status_code == 200:\n            events_response = json.loads(response.content)\n            if events_response[\"total\"] > 0:\n                return events_response\n            siemplify.LOGGER.warn(\"No resultes found to match your request\")\n            return None\n        else:\n            siemplify.LOGGER.error(\"API request returned {}\".format(response.status_code))\n    except Exception as e:\n        siemplify.LOGGER.error(\"Error occurred while fetching security events from Logz.io:\\n{}\".format(e))\n        return None\n        \n\ndef create_event(siemplify, logzio_event):\n    \"\"\"\n    Returns the digested data of a single Logz.io secutiry event\n    \"\"\"\n    siemplify.LOGGER.info(\"Processing siemplify event for logzio security event: {}\".format(logzio_event[\"alertEventId\"]))\n    event = {}\n    try:\n        event[\"StartTime\"] =  logzio_event[\"alertWindowStartDate\"]\n        event[\"EndTime\"] = logzio_event[\"alertWindowEndDate\"]\n        event[\"event_name\"] = logzio_event[\"name\"]\n        event[\"device_product\"] = PRODUCT # ie: \"device_product\" is the field name that describes the product the event originated from.\n        event[\"alertEventId\"] = logzio_event[\"alertEventId\"]\n        event[\"description\"] = logzio_event[\"description\"]\n        event[\"alertSummary\"] = logzio_event[\"alertSummary\"]\n        event[\"eventDate\"] = logzio_event[\"eventDate\"]\n        event[\"severity\"] = logzio_event[\"severity\"]\n        if \"groupBy\" in logzio_event:\n            for k, v in logzio_event[\"groupBy\"].items():\n                event[\"groupBy.{}\".format(k)] = v\n        if \"tags\" in logzio_event:\n            tags_counter = 0\n            for tag in logzio_event[\"tags\"]:\n                event[\"tags.{}\".format(tags_counter)] = tag\n                tags_counter += 1\n        event[\"hits\"] = logzio_event[\"hits\"]\n    except Exception as e:\n        siemplify.LOGGER.error(\"Error occurred while trying to process logzio event {}:{}\\n Dropping event.\".format(logzio_event[\"alertEventId\"], e))\n        return None\n    return event\n    \n    \ndef create_alert(siemplify, event, logzio_event):\n    \"\"\"\n    Returns an alert which is one event that contains one Logz.io secrutiry event\n    \"\"\"\n    siemplify.LOGGER.info(\"Processing siempify alert for logzio security event: {}\".format(logzio_event[\"alertId\"]))\n    alert_info = AlertInfo()\n    \n    try:\n        alert_info.display_id = logzio_event[\"alertEventId\"]\n        alert_info.ticket_id = logzio_event[\"alertEventId\"]\n        alert_info.name = logzio_event[\"name\"]\n        alert_info.rule_generator = logzio_event[\"alertSummary\"]\n        alert_info.start_time = logzio_event[\"alertWindowStartDate\"]\n        alert_info.end_time = logzio_event[\"alertWindowEndDate\"]\n        alert_info.priority = SEVERITIES[logzio_event[\"severity\"]]\n        alert_info.device_vendor = VENDOR\n        alert_info.device_product = PRODUCT\n    except Exception as e:\n        siemplify.LOGGER.error(\"Error occurred while trying to add event {} to alert: {}\\n Dropping event.\".format(logzio_event[\"alertEventId\"], e))\n        alert_info = None\n    \n    siemplify.LOGGER.info(\"Creating siempify alert for logzio security event: {}\".format(logzio_event[\"alertId\"]))\n    try:\n        if alert_info is not None and event is not None:\n            alert_info.events.append(event)\n        siemplify.LOGGER.info(\"Added Event {} to Alert {}\".format(logzio_event[\"alertEventId\"], logzio_event[\"alertId\"]))\n    except Exception as e:\n        siemplify.LOGGER.error(\"Failed to process event {} for alert {}\".format(logzio_event[\"alertEventId\"], logzio_event[\"alertId\"]))\n        siemplify.LOGGER.exception(e)\n        return None\n    return alert_info\n    \n\ndef create_alerts_array(siemplify, events_response, api_token, url):\n    \"\"\"\n    Returns the alerts that will be injected to Siemplify.\n    If a query has more results than the page size, the function will request all the relevant\n    pages from Logz.io, and only then will create Siemplify events & alerts.\n    \"\"\"\n    alerts = []\n    collected_events = events_response[\"results\"]\n    num_collected_events = len(collected_events)\n    total_results_available = int(events_response[\"total\"])\n    current_page = int(events_response[\"pagination\"][\"pageNumber\"])\n    num_pages = math.ceil(total_results_available/int(events_response[\"pagination\"][\"pageSize\"]))\n    siemplify.LOGGER.info(\"Request retrieved {} events from Logz.io\".format(num_collected_events))\n    siemplify.LOGGER.info(\"There are {} results in your Logz.io account that match your query\".format(total_results_available))\n    with concurrent.futures.ThreadPoolExecutor(max_workers=num_pages) as executor:\n        futures = []\n        while num_pages > current_page:\n            current_page += 1\n            print(\"fetching page: {}\".format(current_page))\n            futures.append(executor.submit(execute_logzio_api, siemplify, api_token, url, current_page))\n        for future in concurrent.futures.as_completed(futures):\n            new_event = future.result()\n            if new_event is not None:\n                collected_events += new_event[\"results\"]\n                num_collected_events += len(new_event[\"results\"])\n                siemplify.LOGGER.info(\"Fetched {} events\".format(len(new_event[\"results\"])))\n        \n        if total_results_available != num_collected_events:\n            siemplify.LOGGER.warn(\"Retrieved {} events out of {} available events. Only the retrieved events will be injected to Siemplify\".format(num_collected_events, total_results_available))\n    siemplify.LOGGER.info(\"Total collected: {}\".format(len(collected_events)))\n    \n    latest_timestamp = siemplify.fetch_timestamp()\n    for logzio_event in collected_events:\n        event = create_event(siemplify, logzio_event)\n        alert = create_alert(siemplify, event, logzio_event)\n        if alert is not None:\n            alerts.append(alert)\n            siemplify.LOGGER.info(\"Added Alert {} to package results\".format(logzio_event[\"alertId\"]))\n            current_end_time = int(logzio_event[\"eventDate\"])\n            if latest_timestamp < current_end_time:\n                latest_timestamp = current_end_time\n    \n    save_latest_timestamp(siemplify, latest_timestamp)\n    \n    return alerts\n\n\ndef execute_logzio_api(siemplify, api_token, url, page_number=1):\n    \"\"\" Sends request for security events to Logz.io and returnes the response, if applicable \"\"\"\n    try:\n        siemplify.LOGGER.info(\"Fetching page number {}\".format(page_number))\n        new_request = create_request_body_obj(siemplify, page_number)\n        new_events = fetch_security_events(api_token, new_request, url, siemplify)\n        if new_events is not None:\n            return new_events\n    except Exception as e:\n        siemplify.LOGGER.error(\"Error occurred while fetching events from page {}: {}\".format(page_number, e))\n    return None\n    \n\ndef get_dates(siemplify):\n    \"\"\"\n    Returnes start time & end time for fetching security events from Logz.io.\n    If it's the first run, the start time will be the start time the user inserted, otherwise\n    it will be the latest saved timestamp with offset of +1 millisecond.\n    The end date will always be now - 3 min.\n    \"\"\"\n    start_time = siemplify.fetch_timestamp()\n    siemplify.LOGGER.info(\"Fetched timestamp: {}\".format(start_time))\n    if start_time == 0:\n        # first run\n        siemplify.LOGGER.info(\"No saved latest timestamp. Using user's input.\")\n        start_time_str = siemplify.extract_connector_param(\"from_date\", is_mandatory=True)\n        if not start_time_str.isdigit():\n            start_time = datetime.datetime.timestamp(dateparser.parse(start_time_str, date_formats=['%Y-%m-%dT%H:%M:%S.%f'], settings={'TIMEZONE': 'UTC'}))\n        else:\n            start_time = start_time_str\n    else:\n        milliseconds_delta = datetime.timedelta(milliseconds=100)\n        start_time = (datetime.datetime.fromtimestamp(start_time) + milliseconds_delta).timestamp()\n    end_time_delta = datetime.timedelta(minutes=3)\n    now = datetime.datetime.now()\n    end_time_datetime = now - end_time_delta\n    end_time = end_time_datetime.timestamp()\n    return str(start_time), str(end_time)\n    \n\ndef save_latest_timestamp(siemplify, latest_timestamp_from_events):\n    \"\"\"\n    Saves the latest timestamp.\n    Latest timestamp will be the latest between the two: now - hour, or timestamp of latest event.\n    \"\"\"\n    hour_ago_delta = datetime.timedelta(hours=1)\n    hour_ago = (datetime.datetime.now() - hour_ago_delta).timestamp()\n    latest = max(latest_timestamp_from_events, int(hour_ago))\n    siemplify.LOGGER.info(\"Latest timestamp to save: {}\".format(latest))\n    siemplify.save_timestamp(new_timestamp=latest)\n    \n\ndef get_logzio_api_endpoint(siemplify, region):\n    \"\"\"\n    Returns the endpoint of Logz.io API.\n    Prioritizing a custom endoint, if entered.\n    If not, falling back to the regaular enspoints, based on the logzio_region (defaults to us).\n    \"\"\"\n    custom_endpoint = siemplify.extract_connector_param(\"logzio_custom_endpoint\", is_mandatory=False, default_value=\"\")\n    if custom_endpoint is not None and custom_endpoint != \"\":\n        siemplify.LOGGER.info(\"Using custom endpoint: {}\".format(custom_endpoint))\n        return custom_endpoint + TRIGGERED_RULES_API_SUFFIX\n    return get_base_api_url(region) + TRIGGERED_RULES_API_SUFFIX\n        \n        \nif __name__ == \"__main__\":\n    main()\n    ",
      "Description": "The Script to run",
      "Type": 12,
      "Mode": 0,
      "IsDisplayed": true,
      "IsMandatory": true,
      "Id": 504,
      "CreationTimeUnixTimeInMs": 1616683425567,
      "ModificationTimeUnixTimeInMs": 1616683425567
    },
    {
      "ConnectorIdentifier": "LOGZIO fetch-security-events_427e87e4-4c21-4c33-9f2a-42f984a25800",
      "ParamName": "severities",
      "ParamValue": "",
      "Description": "A comma-delimited list of security rules severities: \"INFO\", \"LOW\", \"MEDIUM\", \"HIGH\", \"SEVERE\".",
      "Type": 2,
      "Mode": null,
      "IsDisplayed": true,
      "IsMandatory": false,
      "Id": 503,
      "CreationTimeUnixTimeInMs": 1616683425567,
      "ModificationTimeUnixTimeInMs": 1616683425567
    },
    {
      "ConnectorIdentifier": "LOGZIO fetch-security-events_427e87e4-4c21-4c33-9f2a-42f984a25800",
      "ParamName": "search_term",
      "ParamValue": "",
      "Description": "Filter for a matching string in the rule name.\n",
      "Type": 2,
      "Mode": null,
      "IsDisplayed": true,
      "IsMandatory": false,
      "Id": 502,
      "CreationTimeUnixTimeInMs": 1616683425567,
      "ModificationTimeUnixTimeInMs": 1616683425567
    },
    {
      "ConnectorIdentifier": "LOGZIO fetch-security-events_427e87e4-4c21-4c33-9f2a-42f984a25800",
      "ParamName": "PythonProcessTimeout",
      "ParamValue": "30",
      "Description": "The timeout limit (in seconds) for the python process running current script",
      "Type": 2,
      "Mode": null,
      "IsDisplayed": true,
      "IsMandatory": true,
      "Id": 501,
      "CreationTimeUnixTimeInMs": 1616683425567,
      "ModificationTimeUnixTimeInMs": 1616683425567
    },
    {
      "ConnectorIdentifier": "LOGZIO fetch-security-events_427e87e4-4c21-4c33-9f2a-42f984a25800",
      "ParamName": "page_size",
      "ParamValue": "25",
      "Description": "Controls the number of results per page. Valid inputs are 1 to 1000.",
      "Type": 1,
      "Mode": null,
      "IsDisplayed": true,
      "IsMandatory": false,
      "Id": 500,
      "CreationTimeUnixTimeInMs": 1616683425567,
      "ModificationTimeUnixTimeInMs": 1616683425567
    },
    {
      "ConnectorIdentifier": "LOGZIO fetch-security-events_427e87e4-4c21-4c33-9f2a-42f984a25800",
      "ParamName": "logzio_token",
      "ParamValue": "",
      "Description": "API token for your Logz.io security account.\n",
      "Type": 3,
      "Mode": null,
      "IsDisplayed": true,
      "IsMandatory": true,
      "Id": 499,
      "CreationTimeUnixTimeInMs": 1616683425567,
      "ModificationTimeUnixTimeInMs": 1616683425567
    },
    {
      "ConnectorIdentifier": "LOGZIO fetch-security-events_427e87e4-4c21-4c33-9f2a-42f984a25800",
      "ParamName": "logzio_region",
      "ParamValue": null,
      "Description": "2-letter region code for your Logz.io account.",
      "Type": 2,
      "Mode": null,
      "IsDisplayed": true,
      "IsMandatory": false,
      "Id": 498,
      "CreationTimeUnixTimeInMs": 1616683425567,
      "ModificationTimeUnixTimeInMs": 1616683425567
    },
    {
      "ConnectorIdentifier": "LOGZIO fetch-security-events_427e87e4-4c21-4c33-9f2a-42f984a25800",
      "ParamName": "logzio_custom_endpoint",
      "ParamValue": null,
      "Description": "Optional. Relevant if you use a custom URL with the Logz.io API. Overrides logzio_region.\n",
      "Type": 2,
      "Mode": null,
      "IsDisplayed": true,
      "IsMandatory": false,
      "Id": 497,
      "CreationTimeUnixTimeInMs": 1616683425567,
      "ModificationTimeUnixTimeInMs": 1616683425567
    },
    {
      "ConnectorIdentifier": "LOGZIO fetch-security-events_427e87e4-4c21-4c33-9f2a-42f984a25800",
      "ParamName": "from_date",
      "ParamValue": "24 hours ago",
      "Description": "Earliest time to search. Accepts formats supported by dateparser lib: Unix timestamps, relative time, or the format  \"%Y-%m-%dT%H:%M:%S.%f\".",
      "Type": 2,
      "Mode": null,
      "IsDisplayed": true,
      "IsMandatory": true,
      "Id": 496,
      "CreationTimeUnixTimeInMs": 1616683425567,
      "ModificationTimeUnixTimeInMs": 1616683425567
    }
  ],
  "Id": 17,
  "CreationTimeUnixTimeInMs": 1616683425567,
  "ModificationTimeUnixTimeInMs": 1616683425567
}
{"Name":"Wait For Reply","Description":"Wait for a thread reply to a message in a channel.","Script":"from SiemplifyUtils import output_handler\nfrom ScriptResult import EXECUTION_STATE_COMPLETED, EXECUTION_STATE_FAILED, EXECUTION_STATE_INPROGRESS\nfrom SiemplifyAction import SiemplifyAction\nfrom SlackManager import SlackManager, SlackManagerException\nfrom TIPCommon import extract_configuration_param, extract_action_param\n\nSCRIPT_NAME = u'Slack - WaitForReply'\nPROVIDER_NAME = u'Slack'\n\n\n@output_handler\ndef main():\n    siemplify = SiemplifyAction()\n    siemplify.script_name = SCRIPT_NAME\n    siemplify.LOGGER.info(u\"----------------- Main - Param Init -----------------\")\n\n    api_token = extract_configuration_param(\n        siemplify,\n        provider_name=PROVIDER_NAME,\n        param_name=\"ApiToken\",\n        input_type=unicode\n    )\n\n    verify_ssl = extract_configuration_param(\n        siemplify,\n        provider_name=PROVIDER_NAME,\n        param_name=\"Verify SSL\",\n        input_type=bool\n    )\n\n    ts = extract_action_param(\n        siemplify,\n        param_name=\"Message Timestamp\",\n        is_mandatory=True,\n        print_value=True,\n        input_type=unicode\n    )\n\n    channel_name = extract_action_param(\n        siemplify,\n        param_name=\"Channel\",\n        is_mandatory=False,\n        print_value=True,\n        input_type=unicode\n    )\n\n    channel_id = extract_action_param(\n        siemplify,\n        param_name=\"Channel ID\",\n        is_mandatory=False,\n        print_value=True,\n        input_type=unicode\n    )\n\n    siemplify.LOGGER.info(u\"----------------- Main - Started -----------------\")\n\n    try:\n        slack_manager = SlackManager(api_token, verify_ssl)\n\n        if not (channel_name or channel_id):\n            siemplify.LOGGER.error(u\"Either Channel or Channel ID parameters must be specified. Aborting.\")\n            siemplify.end(u\"Either Channel or Channel ID parameters must be specified. Aborting.\", u'false', EXECUTION_STATE_FAILED)\n\n        if channel_id:\n            if channel_name:\n                siemplify.LOGGER.warn(u\"Both Channel and Channel ID parameters were provided. Only Channel ID will be used.\")\n            siemplify.LOGGER.info(u\"Fetching replies for channel {}\".format(channel_id))\n            replies = slack_manager.get_message_replies(channel_id, ts)\n\n        else:\n            siemplify.LOGGER.info(u\"Fetching channel ID for channel {}\".format(channel_name))\n            channel = slack_manager.get_channel_by_name(channel_name)\n            siemplify.LOGGER.info(u\"Fetching replies for channel {}\".format(channel_id))\n            replies = slack_manager.get_message_replies(channel.id, ts)\n\n        if replies:\n            # At least one reply was found - take the first\n            replies = sorted(replies, key=lambda reply: reply.ts)\n            first_reply = replies[0]\n            output_message = u'A reply was found for the message in the channel. Reply content: {}'.format(\n                first_reply.text)\n            siemplify.result.add_result_json(first_reply.raw_data)\n            result = 'true'\n            status = EXECUTION_STATE_COMPLETED\n            siemplify.LOGGER.info(u'Script Name: {} | {}'.format(SCRIPT_NAME, output_message))\n\n        else:\n            # There are no replies\n            output_message = u'No replies were found for the message in the channel, waiting.'\n            result = 'true'\n            status = EXECUTION_STATE_INPROGRESS\n            siemplify.LOGGER.info(u'Script Name: {} | {}'.format(SCRIPT_NAME, output_message))\n\n    except SlackManagerException as e:\n        output_message = u'An error occurred when trying to get message replies: {}'.format(e)\n        result = 'false'\n        status = EXECUTION_STATE_FAILED\n        siemplify.LOGGER.error(u'Script Name: {} | {}'.format(SCRIPT_NAME, output_message))\n        siemplify.LOGGER.exception(e)\n\n    siemplify.LOGGER.info(u\"----------------- Main - Finished -----------------\")\n    siemplify.LOGGER.info(u'Status: {}'.format(status))\n    siemplify.LOGGER.info(u'Result: {}'.format(result))\n    siemplify.LOGGER.info(u'Output Message: {}'.format(output_message))\n\n    siemplify.end(output_message, result, status)\n\n\nif __name__ == \"__main__\":\n    main()\n","IntegrationIdentifier":"Slack Custom","ScriptResultName":"ScriptResult","DynamicResultsMetadata":[{"ResultName":"JsonResult","ResultExample":"{\n  \"client_msg_id\": \"00000000-0000-0000-0000-000000000000\",\n  \"type\": \"message\",\n  \"text\": \"Yes\",\n  \"user\": \"U0000000\",\n  \"ts\": \"1578390603.001200\",\n  \"team\": \"T0000000\",\n  \"blocks\": [\n    {\n      \"type\": \"rich_text\",\n      \"block_id\": \"2Bb=\",\n      \"elements\": [\n        {\n          \"type\": \"rich_text_section\",\n          \"elements\": [\n            {\n              \"type\": \"text\",\n              \"text\": \"Example\"\n            }\n          ]\n        }\n      ]\n    }\n  ],\n  \"thread_ts\": \"1578390492.001100\",\n  \"parent_user_id\": \"U0000000\"\n}","ShowResult":true}],"Creator":"b0e3aeaa-2c91-4a0e-99de-f209e1103030","IsEnabled":true,"IsCustom":true,"IsSystem":false,"Version":6.0,"TimeoutSeconds":300,"IsAsync":false,"AsyncPollingIntervalInSeconds":30,"TotalIntervalTimeoutForAsyncInSeconds":86400,"Parameters":[{"CustomActionId":0,"IsMandatory":true,"DefaultValue":"0000.000","Description":"The timestamp of the message to get the replies from (in milliseconds).","Name":"Message Timestamp","Value":"0000.000","Type":0,"OptionalValues":null,"OptionalValuesJson":null},{"CustomActionId":0,"IsMandatory":false,"DefaultValue":null,"Description":"The name of the target channel. Notice, if both Channel and Channel ID parameter are passed, only Channel ID will be used.","Name":"Channel","Value":null,"Type":0,"OptionalValues":null,"OptionalValuesJson":null},{"CustomActionId":0,"IsMandatory":false,"DefaultValue":null,"Description":"The ID of the target channel. Notice, if both Channel and Channel ID parameter are passed, only Channel ID will be used.","Name":"Channel ID","Value":null,"Type":0,"OptionalValues":null,"OptionalValuesJson":null}],"DefaultResultValue":"","PythonVersion":"None","SimulationData":{"Entities":null},"SimulationDataJson":null}
{"Name":"Build Block","Description":"Builds a slack message block/s according to the given parameters' values","Script":"from SiemplifyUtils import output_handler, convert_dict_to_json_result_dict\nfrom ScriptResult import EXECUTION_STATE_COMPLETED, EXECUTION_STATE_FAILED\nfrom SiemplifyAction import SiemplifyAction\nfrom TIPCommon import extract_configuration_param, extract_action_param\nimport re\nimport json\nimport logging\nimport os\nimport json\nimport ast\n\n\nSCRIPT_NAME = u'Slack Custom - Build Block'\nPROVIDER_NAME = u'Slack Custom'\nQUESTION_BLOCK = \"\"\"{{\"type\": \"divider\"}},{{\"type\": \"section\",\"text\": {{\"type\": \"mrkdwn\",\"text\": \"{question}\"}}}}\"\"\"\nBUTTON_BLOCK = \"\"\"{{\"type\": \"button\",\"text\": {{\"type\": \"plain_text\",\"text\": \"{answer}\"}},\"value\": \"blockuser\",\"url\": \"{url_}\"}}\"\"\"\n\n@output_handler\ndef main():\n\n    json_result = {}\n    status = EXECUTION_STATE_FAILED\n    output_message = ''\n    siemplify = SiemplifyAction()\n    siemplify.script_name = SCRIPT_NAME\n    siemplify.LOGGER.info(u\"----------------- Main - Param Init -----------------\")\n\n    api_token = extract_configuration_param(\n        siemplify,\n        provider_name=PROVIDER_NAME,\n        param_name=\"ApiToken\",\n    )\n\n    verify_ssl = extract_configuration_param(\n        siemplify,\n        provider_name=PROVIDER_NAME,\n        param_name=\"Verify SSL\",\n    )\n    hook_url = extract_action_param(\n        siemplify,\n        param_name=\"WebHook Url\",\n        is_mandatory=True,\n        print_value=False,\n    )\n\n    question = extract_action_param(\n        siemplify,\n        param_name=\"Question\",\n        is_mandatory=True,\n        print_value=False,\n    )\n\n    answers = extract_action_param(\n        siemplify,\n        param_name=\"Answers Buttons\",\n        is_mandatory=True,\n        print_value=False,\n    )\n\n    \n    view_case_url= extract_action_param(\n        siemplify,\n        param_name=\"View Case In Siemplify URL\",\n        is_mandatory=True,\n        print_value=False,\n    )\n    case_id= extract_action_param(\n        siemplify,\n        param_name=\"Case Id\",\n        is_mandatory=True,\n        print_value=False,\n    )\n    \n    siemplify.LOGGER.info(u\"----------------- Main - Started -----------------\")\n    \n    answers_list = answers.split(',')\n    payload = '['\n    payload += QUESTION_BLOCK.format(question=question.encode('utf-8').strip())\n    payload += \"\"\",\n        {\n            \"type\": \"actions\",\n            \"elements\": [\"\"\"\n    view_case_url += '/#/main/cases/dynamic-view/'\n    view_case_url += case_id\n    for i in answers_list:\n        if i!=\"\":\n            payload += BUTTON_BLOCK.format(answer = i, url_ = hook_url+\"?Answer=\"+i.replace(' ','_'))\n            payload+=',\\n'\n    if view_case_url != 'None':\n        payload += BUTTON_BLOCK.format(answer='View Case In Siemplify', url_=view_case_url)\n        payload+=',\\n'\n    payload += ']}]'\n    try:\n        siemplify.LOGGER.info(\"Try - Evaluating payload\")\n        payload = ast.literal_eval(question)\n        siemplify.LOGGER.info(\"Success - Evaluating payload\")\n        status = EXECUTION_STATE_COMPLETED\n    except Exception as e:\n        siemplify.LOGGER.error(\"Error message: {}\".format(e))\n        \n    status = EXECUTION_STATE_COMPLETED\n    siemplify.result.add_result_json({'result':payload})\n    siemplify.LOGGER.info(u\"----------------- Main - Finished -----------------\")\n    result_value = True\n    siemplify.end(output_message, result_value, status)\n\n\nif __name__ == '__main__':\n    main()","IntegrationIdentifier":"Slack Custom","ScriptResultName":"ScriptResult","DynamicResultsMetadata":[{"ResultName":"JsonResult","ResultExample":"{\"result\": \"[{\\\"type\\\": \\\"divider\\\"},{\\\"type\\\": \\\"section\\\",\\\"text\\\": {\\\"type\\\": \\\"mrkdwn\\\",\\\"text\\\": \\\"Do you approve?\\\"}},\\n        {\\n            \\\"type\\\": \\\"actions\\\",\\n            \\\"elements\\\": [{\\\"type\\\": \\\"button\\\",\\\"text\\\": {\\\"type\\\": \\\"plain_text\\\",\\\"text\\\": \\\"Yes\\\"},\\\"value\\\": \\\"blockuser\\\",\\\"url\\\": \\\"https://webhook.site/111-111-111?Answer=Yes\\\"},\\n{\\\"type\\\": \\\"button\\\",\\\"text\\\": {\\\"type\\\": \\\"plain_text\\\",\\\"text\\\": \\\"No\\\"},\\\"value\\\": \\\"blockuser\\\",\\\"url\\\": \\\"https://webhook.site/111-111-111?Answer=No\\\"},\\n{\\\"type\\\": \\\"button\\\",\\\"text\\\": {\\\"type\\\": \\\"plain_text\\\",\\\"text\\\": \\\"View Case In Siemplify\\\"},\\\"value\\\": \\\"blockuser\\\",\\\"url\\\": \\\"shir.siemplifycloud.com/#/main/cases/dynamic-view/1\\\"},\\n]}]\"}\n","ShowResult":true}],"Creator":"dec3622d-33b8-458e-9bcd-372744fc68d4","IsEnabled":true,"IsCustom":true,"IsSystem":false,"Version":8.0,"TimeoutSeconds":300,"IsAsync":false,"AsyncPollingIntervalInSeconds":30,"TotalIntervalTimeoutForAsyncInSeconds":86400,"Parameters":[{"CustomActionId":0,"IsMandatory":true,"DefaultValue":"None","Description":"URL of the Webhook to be attached to the buttons.\nExample:\nwebhook.site/111-111-111","Name":"WebHook Url","Value":"None","Type":0,"OptionalValues":null,"OptionalValuesJson":null},{"CustomActionId":0,"IsMandatory":true,"DefaultValue":"None","Description":"Base URL of your Siemplify environment. ","Name":"View Case In Siemplify URL","Value":"None","Type":0,"OptionalValues":null,"OptionalValuesJson":null},{"CustomActionId":0,"IsMandatory":true,"DefaultValue":"None","Description":"Answers, comma separated.\nExample:\nYes,No","Name":"Answers Buttons","Value":"None","Type":0,"OptionalValues":null,"OptionalValuesJson":null},{"CustomActionId":0,"IsMandatory":true,"DefaultValue":"None","Description":"ID of the relevant case in Siemplify","Name":"Case Id","Value":"None","Type":0,"OptionalValues":null,"OptionalValuesJson":null},{"CustomActionId":0,"IsMandatory":true,"DefaultValue":"None","Description":"Question to ask the recipient","Name":"Question","Value":"None","Type":0,"OptionalValues":null,"OptionalValuesJson":null}],"DefaultResultValue":"","PythonVersion":"None","SimulationData":{"Entities":null},"SimulationDataJson":null}
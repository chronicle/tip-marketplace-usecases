{"Name":"Send Message by Name or Email","Description":"Sends a message to a slack user by their email/name, containing the given text or slack blocks.","Script":"from SiemplifyAction import SiemplifyAction\nfrom SiemplifyUtils import unix_now, convert_unixtime_to_datetime, output_handler\nfrom ScriptResult import EXECUTION_STATE_COMPLETED, EXECUTION_STATE_FAILED,EXECUTION_STATE_TIMEDOUT\nfrom TIPCommon import extract_configuration_param, extract_action_param\nfrom SlackAdditionalManager import SlackAdditionalManager, SlackManagerException, UserNotFoundException\nimport json, ast\nPROVIDER_NAME = u'Slack Custom'\n\n@output_handler\ndef main():\n    siemplify = SiemplifyAction()\n    siemplify.LOGGER.info(u\"----------------- Main - Param Init -----------------\")\n\n    api_token = extract_configuration_param(\n        siemplify,\n        provider_name=PROVIDER_NAME,\n        param_name=\"ApiToken\",\n        input_type=unicode\n    )\n\n    verify_ssl = extract_configuration_param(\n        siemplify,\n        provider_name=PROVIDER_NAME,\n        param_name=\"Verify SSL\",\n        input_type=bool\n    )\n\n    message_type = extract_action_param(\n        siemplify,\n        param_name=\"Message Type\",\n        is_mandatory=True,\n        print_value=True,\n        input_type=unicode\n    )\n    recipient_type = extract_action_param(\n        siemplify,\n        param_name=\"Recipient Type\",\n        is_mandatory=True,\n        print_value=True,\n        input_type=unicode\n    )\n    message = extract_action_param(\n        siemplify,\n        param_name=\"Message\",\n        is_mandatory=True,\n        print_value=True,\n        input_type=unicode\n    )\n    recipient = extract_action_param(\n        siemplify,\n        param_name=\"Recipient\",\n        is_mandatory=True,\n        print_value=True,\n        input_type=unicode\n    )\n\n    siemplify.LOGGER.info(u\"----------------- Main - Started -----------------\")\n    result_value = ''\n    response = ''\n    try:\n        user_id = ''\n        slack_manager = SlackAdditionalManager(api_token, verify_ssl)\n        users = list(slack_manager.list_users())\n        if recipient_type == 'Full name':\n            for user in users:\n                if recipient.lower() in user.to_json()['Profile']['Real Name'].lower():\n                    user_id = user.to_json()['ID']\n        elif recipient_type == 'Email':\n            for user in users:\n                if user.to_json()['Profile']['Email']:\n                    if recipient.lower() in user.to_json()['Profile']['Email'].lower():\n                        user_id = user.to_json()['ID']\n        elif recipient_type == 'Id':\n            user_id = recipient\n        if message_type == 'Text':\n            response = slack_manager.send_message(channel=user_id,message=message)\n        elif message_type == 'Block':\n            payload = \"\";\n            payload = ast.literal_eval(message)\n            siemplify.LOGGER.info(\"Done evaluating payload\")\n            response = slack_manager.send_block_message(channel=user_id,message=payload)\n    \n        \n        output_message = u'Successfully sent message'\n        status = EXECUTION_STATE_COMPLETED\n        result_value=True\n        siemplify.result.add_result_json(response)\n        \n        \n    except Exception as e:\n        output_message = u'An error occurred when trying to receive user with id {}: {}'.format(user_id, e)\n        result = 'false'\n        status = EXECUTION_STATE_FAILED\n        siemplify.result.add_result_json({\"ok\":False})\n        siemplify.LOGGER.exception(e)\n    \n    siemplify.LOGGER.info(\"\\n  status: {}\\n  result_value: {}\\n  output_message: {}\".format(status,result_value, output_message))\n\n    siemplify.end(output_message, result_value, status)\n\n\nif __name__ == \"__main__\":\n    main()\n","IntegrationIdentifier":"Slack Custom","ScriptResultName":"ScriptResult","DynamicResultsMetadata":[{"ResultName":"JsonResult","ResultExample":"{\n\t\"message\": {\n\t\t\"username\": \"Slack API Tester\",\n\t\t\"text\": \"Hi\",\n\t\t\"ts\": \"1649334046.933749\",\n\t\t\"subtype\": \"bot_message\",\n\t\t\"type\": \"message\",\n\t\t\"bot_id\": \"111\"\n\t},\n\t\"ok\": true,\n\t\"ts\": \"1649334046.933749\",\n\t\"channel\": \"AAA1111\"\n}","ShowResult":true}],"Creator":"dec3622d-33b8-458e-9bcd-372744fc68d4","IsEnabled":true,"IsCustom":true,"IsSystem":false,"Version":10.0,"TimeoutSeconds":300,"IsAsync":false,"AsyncPollingIntervalInSeconds":30,"TotalIntervalTimeoutForAsyncInSeconds":86400,"Parameters":[{"CustomActionId":0,"IsMandatory":true,"DefaultValue":"None","Description":"Message content - blocks/text","Name":"Message","Value":"None","Type":0,"OptionalValues":null,"OptionalValuesJson":null},{"CustomActionId":0,"IsMandatory":true,"DefaultValue":"None","Description":"Identifier of recipient","Name":"Recipient","Value":"None","Type":0,"OptionalValues":null,"OptionalValuesJson":null},{"CustomActionId":0,"IsMandatory":true,"DefaultValue":"Text","Description":"Simple text or blocks","Name":"Message Type","Value":"Text","Type":15,"OptionalValues":["Text","Block"],"OptionalValuesJson":"[\"Text\",\"Block\"]"},{"CustomActionId":0,"IsMandatory":true,"DefaultValue":"Full name","Description":"Full name, User ID or Email","Name":"Recipient Type","Value":"Full name","Type":15,"OptionalValues":["Email","Id","Full name"],"OptionalValuesJson":"[\"Email\",\"Id\",\"Full name\"]"}],"DefaultResultValue":"","PythonVersion":"None","SimulationData":{"Entities":null},"SimulationDataJson":null}